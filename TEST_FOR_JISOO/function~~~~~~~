stat() — 파일이나 디렉토리의 기본 정보가 필요할 때
사용 예:

파일 존재 확인

크기 확인

최종 수정 시간 확인

권한 확인

lstat() — 심볼릭 링크 자체를 확인하고 싶을 때
사용 예:

이 경로가 심볼릭 링크인지 확인하고 싶을 때

링크가 broken인지 검사할 때

백업 도구나 파일 동기화 프로그램 만들 때
🎯 그래서 요약하면
심볼릭 링크는 유연하게 파일/디렉토리를 가리키는 방법

파일 시스템 설계, 유틸리티 툴, 패키지 관리, 개발 환경 구성 등에서 필수

lstat()은 링크 그 자체를 보고 싶을 때 꼭 필요함
윈도우 바로가기.

fstat() — 이미 열린 파일 디스크립터로 정보 얻고 싶을 때
사용 예:

파일을 open() 또는 pipe(), socket() 등으로 열고, 그 핸들(fd)에 대해 정보가 필요할 때

경로 정보가 필요 없고, 열려 있는 파일에 대해서만 작업할 때

파일을 열었는데, 이게 디바이스인지 파일인지 판단할 때





//memo for heredoc maybe
isatty(int fd)
설명:
해당 파일 디스크립터 fd가 터미널(tty) 인지 확인해주는 함수야.

c
복사
편집
#include <unistd.h>

int isatty(int fd);
반환값: 1이면 터미널, 0이면 아님

예시: isatty(0) → 표준 입력이 터미널인지 확인
(ex. 파이프가 아니라 진짜 유저가 직접 쳤는지 등)



ttyname(int fd)
설명:
파일 디스크립터 fd가 가리키는 터미널 디바이스의 경로 이름을 문자열로 반환

c
복사
편집
#include <unistd.h>

char *ttyname(int fd);
예: /dev/tty, /dev/pts/1 같은 문자열 반환



ttyslot(void)
설명:
현재 프로세스가 사용하는 터미널의 슬롯 번호를 반환
보통 /etc/ttys 혹은 /dev/tty* 목록에서 몇 번째 터미널인지 확인할 때 쓰였어.

예전 BSD 스타일 시스템에서 많이 사용됨
거의 레거시급 기능 거의안쓴대



ioctl(int fd, unsigned long request, ...)
설명:
파일 디스크립터를 대상으로 하는 범용 제어 함수
→ 특히 터미널, 소켓, 디바이스 같은 특수 파일들을 제어할 때 자주 쓰임
c
복사
편집
#include <sys/ioctl.h>

int ioctl(int fd, unsigned long request, ...);