root@796eb7844e49:/#cat strace_output.txt 
289   execve("/bin/sh", ["/bin/sh", "-c", "pwd | wc"], ["HOSTNAME=796eb7844e49", "PWD=/", "HOME=/root", "TERM=xterm", "SHLVL=1", "PATH=/usr/local/sbin:/usr/local/"..., "_=/usr/bin/strace"]) = 0
289   openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
289   close(3)                          = 0
289   openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
289   read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\20t\2\0\0\0\0\0"..., 832) = 832
289   close(3)                          = 0

289   pipe2([3, 4], 0)                  = 0  //int fd[2]  -->pipe(fd);
289   clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f1c33f33a10) = 290
289   close(4)                          = 0 //fd[1]is for write , fd[0] is for read
290   close(3)                          = 0
290   dup2(4, 1)                        = 1  dup2(fd[1], stdout);
290   close(4 <unfinished ...>


289   clone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD <unfinished ...> pid_t pid2 = fork();
290   <... close resumed>)              = 0
290   write(1, "/\n", 2)                = 2
289   <... clone resumed>, child_tidptr=0x7f1c33f33a10)
289   close(3)                          = 0
289   close(-1)                         = -1 EBADF (Bad file descriptor)
291   dup2(3, 0 <unfinished ...>	dup2(fd[0], stdin_fileno);
290   +++ exited with 0 +++
289   --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=290, si_uid=0, si_status=0, si_utime=0, si_stime=0} ---
291   <... dup2 resumed>)               = 0
291   close(3)                          = 0

289   wait4(-1, [{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 290
291   execve("/usr/bin/wc", ["wc"], ["HOSTNAME=796eb7844e49", "SHLVL=1", "HOME=/root", "_=/usr/bin/strace", "TERM=xterm", "PATH=/usr/local/sbin:/usr/local/"..., "PWD=/"] <unfinished ...>
289   wait4(-1,  <unfinished ...>
291   <... execve resumed>)             = 0
291   openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
291   close(3)                          = 0
291   openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
291   read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\20t\2\0\0\0\0\0"..., 832) = 832
291   close(3)                          = 0
291   read(0, "/\n", 16384)             = 2
291   read(0, "", 16384)                = 0

291   write(1, "      1       1       2\n", 24) = 24
291   close(0)                          = 0 //memo okay here close everything 
291   close(1)                          = 0
291   close(2)                          = 0
291   +++ exited with 0 +++
289   <... wait4 resumed>[{WIFEXITED(s) && WEXITSTATUS(s) == 0}], 0, NULL) = 291
289   --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=291, si_uid=0, si_status=0, si_utime=0, si_stime=0} ---
289   wait4(-1, 0x7ffdfddd1acc, WNOHANG, NULL) = -1 ECHILD (No child processes)
289   +++ exited with 0 +++


int last_exit_status = 0;

int	pwd_pipe_wc()
{
	pid_t pid;
	int	fd[2];

 	pipe(fd);
	pid = fork();
	if (pid == 0) //memo 290
	{
		close(fd[0]);
		dup2(fd[1], STDOUT_FILENO);
		close(fd[1]);
		pwd();
		exit(0);
	}
	else
	{
		close(fd[1]);
	}
	int status;
	pid_t pid2;
	pid2 = fork();
	if (pid2 == 0) //memo 291
	{
		#close(fd[1]); //memo it is alredy close at the first process
		dup2(fd[0], STDIN_FILENO);
		close(fd[0]);
		execve("wc");
		exit(0);
	}
	//parent
	else
	{
		child_pid = waitpid(-1, &status, 0);
		if (child_pid > 0)
		{
			if (WIFEXITED(status))
			{
				last_exit_status = WEXITSTATUS(status); // save exit status
				printf("child%d, exited with status :%d\n",child_pid, last_exit_status);
			}
			else if(WIFISIGNALED(status))
			{
				last_exit_status = 128 + WTERMSIG(status); // exit by Signals.
				printf("child%d, exited by Signal :%d\n",child_pid2, WTERMSIG(status));
			}
		}

		child_pid2 = waitpid(pid2, &status, 0);
		if (child_pid2 == pid2)
		{
			if (WIFEXITED(status))
			{
				last_exit_status = WEXITSTATUS(status); // save exit status
				printf("child%d, exited with status :%d\n",child_pid2, last_exit_status);
			}
			else if(WIFISIGNALED(status))
			{
				last_exit_status = 128 + WTERMSIG(status); // exit by Signals.
				printf("child%d, exited by Signal :%d\n",child_pid2, WTERMSIG(status));
			}
		}
	}
	//memo to check all child process in non-blocking way
	// if theres no any more child process -1, or i
	// if there's exied child positive num return , or 
	// if theresno exited child then return 0;
	while (waitpid(-1, NULL, WNOHANG) > 0);
}